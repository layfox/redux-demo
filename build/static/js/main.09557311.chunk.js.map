{"version":3,"sources":["actions/index.js","containers/filterLink.js","components/footer.js","containers/addTodo.js","components/todo.js","components/todoList.js","containers/visibleTodoList.js","components/todoApp.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["nextTodoId","FilterLink","_ref","filter","children","react_default","a","createElement","NavLink","exact","to","concat","activeStyle","textDecoration","color","Footer","filterLink","connect","input","dispatch","onSubmit","e","text","preventDefault","value","trim","type","id","ref","node","Todo","onClick","completed","style","Todos","todos","onTodoClick","map","todo","index","components_todo","Object","assign","key","VisibleTodoList","state","ownProps","getVisibleTodos","toggleTodo","TodoList","TodoApp","match","containers_addTodo","visibleTodoList","params","footer","arguments","length","undefined","action","toConsumableArray","objectSpread","visibilityFilter","todoApp","combineReducers","App","store","createStore","es","BrowserRouter","Switch","Route","path","component","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09557311.chunk.js","sourcesContent":["let nextTodoId = 0;\n\nexport const toggleTodo = id => {\n    return {\n        type: 'TOGGLE_TODO',\n        id\n    }\n};\n\nexport const addTodo = text => {\n    return {\n        type: 'ADD_TODO',\n        id: nextTodoId++,\n        text\n    }\n};\n\nexport const setVisibilityFilter = filter => {\n    return {\n        type: 'SET_VISIBILITY_FILTER',\n        filter\n    }\n};","import {connect} from 'react-redux';\nimport {setVisibilityFilter} from '../actions';\n// import Link from '../components/link';\nimport {NavLink} from 'react-router-dom'\nimport React from 'react';\n\n// const mapStateToPorps = (state, ownProps) => {\n//     return {\n//         active: ownProps.filter === state.visibilityFilter\n//     }\n// }\n\n// const mapDispatchToProps = (dispatch, ownProps) => {\n//     return {\n//         onClick: () => {\n//             dispatch(setVisibilityFilter(ownProps.filter))\n//         }\n//     }\n// }\n\n// const FilterLink = connect(\n//     mapStateToPorps,\n//     mapDispatchToProps\n// )(Link);\n\nconst FilterLink = ({filter, children}) => {\n    return (\n    <NavLink exact to={filter==='all'?'/':`/${filter}`} activeStyle={{\n        textDecoration: 'none',\n        color: 'black'\n    }}>\n        {children}\n    </NavLink>\n)}\n\nexport default FilterLink;","import React from 'react';\nimport FilterLink from '../containers/filterLink'\n\nconst Footer = () => (\n    <p>\n        Show:\n        {' '}\n        <FilterLink filter=\"all\">\n            ALL\n        </FilterLink>\n        {', '}\n        <FilterLink filter=\"active\">\n            ACTIVE\n        </FilterLink>\n        {', '}\n        <FilterLink filter=\"completed\">\n            COMPLETED\n        </FilterLink>\n    </p>\n);\n\nexport default Footer;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {addTodo} from '../actions';\n\nconst AddTodo = ({dispatch}) => {\n    let input;\n\n    return (\n        <form onSubmit={e => {\n            e.preventDefault();\n            if(!input.value.trim()) {\n                return;\n            }\n            dispatch(addTodo(input.value));\n            input.value = '';\n        }}>\n            <input ref={node =>{\n                input = node\n            }} />\n            <button type=\"submit\">Add Todo</button>\n        </form>\n    )\n}\n\nexport default connect()(AddTodo);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({onClick, text, completed}) => (\n    <li\n        onClick={onClick}\n        style={{textDecoration: completed?'line-through':''}}\n    >\n        {text}\n    </li>\n)\n\nTodo.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n}\n\nexport default Todo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './todo';\n\nconst Todos = ({todos, onTodoClick}) => (\n    <ul>\n        {todos.map((todo, index) => (\n            <Todo key={index} {...todo} onClick={() => onTodoClick(index)} />\n        ))}\n    </ul>\n);\n\nTodos.propTypes = {\n    todos: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            completed: PropTypes.bool.isRequired,\n            text: PropTypes.string.isRequired\n        }).isRequired\n    ).isRequired,\n    onTodoClick: PropTypes.func.isRequired\n};\n\nexport default Todos;","import {connect} from 'react-redux';\nimport {toggleTodo} from '../actions';\nimport TodoList from '../components/todoList';\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case 'all':\n            return todos;\n        case 'active':\n            return todos.filter(todo => !todo.completed);\n        case 'completed':\n            return todos.filter(todo => todo.completed);\n        default:\n            return todos;\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        todos: getVisibleTodos(state.todos, ownProps.filter)\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTodoClick: id => {\n            dispatch(toggleTodo(id));\n        }\n    }\n}\n\nconst VisibleTodoList = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList;","import React from 'react';\nimport Footer from './footer';\nimport AddTodo from '../containers/addTodo';\nimport VisibleTodoList from '../containers/visibleTodoList';\n\nconst TodoApp = ({match}) => {\n    return (\n        <div>\n            <AddTodo />\n            <VisibleTodoList  filter={match.params.filter || 'all'} />\n            <Footer />\n        </div>\n    )\n};\n\nexport default TodoApp;","const todos = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n\n        case 'TOGGLE_TODO':\n            return state.map(todo => {\n                return (todo.id == action.id)\n                    ? {...todo, completed: !todo.completed}\n                    : todo\n            });\n        \n        default:\n            return state;\n    }\n}\n\nexport default todos;","const visibilityFilter = (state='all', action) => {\n    switch(action.type){\n        case 'SET_VISIBILITY_FILTER':\n            return state = action.filter;\n        default:\n            return state;\n    }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport filter from './visibilityFilter';\n\nconst todoApp = combineReducers({\n    todos,\n    filter\n});\n\nexport default todoApp;","import React, { Component } from 'react';\nimport TodoApp from './components/todoApp';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport todoApp from './reducers';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    let store = createStore(todoApp);\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path=\"/:filter\" component={TodoApp} />\n            <Route path=\"/\" component={TodoApp} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}